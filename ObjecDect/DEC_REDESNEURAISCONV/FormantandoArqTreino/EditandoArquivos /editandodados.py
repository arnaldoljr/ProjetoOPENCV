"""

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oobq4XeLidbWsc9M0ll3IPMYMpVOtObN
"""

# teste para visualizar os tipos de "aumento" de imagens eu posso fazer...sobrecarregar os bons exemplos para melhorar o aprendizado
#teste no COLAB...vou usar um dataset da casa....
# Plot images
from keras.datasets import mnist
from matplotlib import pyplot
from matplotlib import pyplot as plt
from keras.preprocessing.image import ImageDataGenerator
from keras import backend as K


#carregar o google driver...
from google.colab import drive
drive.mount('/content/drive')




# load data
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# create a grid of 3x3 images
for i in range(0, 9):
    pyplot.subplot(330 + 1 + i)
    pyplot.imshow(x_train[i], cmap=pyplot.get_cmap('gray'))
    
# show the plot

plt.title('Vis Dados')
plt.savefig("VisDadosDatabase.png")



pyplot.show()

#teste 1 para rotacoes randomicas 
# Reshape our data to be in the forma [samples, width, height, color_depth]
x_train = x_train.reshape(x_train.shape[0], 28, 28, 1)
x_test = x_test.reshape(x_test.shape[0], 28, 28, 1)

# Change datatype to float32
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')

# Create our image generator
# Define random rotation parameter to be 60 degrees
train_datagen = ImageDataGenerator(rotation_range=60)

# fit parameters from data
train_datagen.fit(x_train)

# configure batch size and retrieve one batch of images
for x_batch, y_batch in train_datagen.flow(x_train, y_train, batch_size=9):
    # create a grid of 3x3 images
    for i in range(0, 9):
        pyplot.subplot(330 + 1 + i)
        pyplot.imshow(x_batch[i].reshape(28, 28), cmap=pyplot.get_cmap('gray'))# show the plot
        
    plt.savefig("TesteRotacionandoDado.png")

    pyplot.show()
    break

    
#apicando zoom Ã  imagem 

# Create our image generator
# Define shearing and zooming parameters to be 0.5 each
train_datagen = ImageDataGenerator(shear_range=0.5,
                                   zoom_range=0.5)

# fit parameters from data
train_datagen.fit(x_train)

# configure batch size and retrieve one batch of images
for x_batch, y_batch in train_datagen.flow(x_train, y_train, batch_size=9):
    # create a grid of 3x3 images
    for i in range(0, 9):
        pyplot.subplot(330 + 1 + i)
        pyplot.imshow(x_batch[i].reshape(28, 28), cmap=pyplot.get_cmap('gray'))# show the plot
    
    plt.savefig("ZoomAosDados.png")

    pyplot.show()
    break

#modificacoes horizontais e verticais 



# define data preparation
train_datagen = ImageDataGenerator(vertical_flip=True,
                                   horizontal_flip=True)

# fit parameters from data
train_datagen.fit(x_train)

# configure batch size and retrieve one batch of images
for x_batch, y_batch in train_datagen.flow(x_train, y_train, batch_size=9):
    # create a grid of 3x3 images
    for i in range(0, 9):
        pyplot.subplot(330 + 1 + i)
        pyplot.imshow(x_batch[i].reshape(28, 28), cmap=pyplot.get_cmap('gray'))# show the plot
    
    plt.savefig("RotacionadoDados.png")
    pyplot.show()
    break
    
    
    
# Aplicando Shift randomico.



# define data preparation
train_datagen = ImageDataGenerator(width_shift_range=0.3,
                                   height_shift_range=0.3)

# fit parameters from data
train_datagen.fit(x_train)

# configure batch size and retrieve one batch of images
for x_batch, y_batch in train_datagen.flow(x_train, y_train, batch_size=9):
    # create a grid of 3x3 images
    for i in range(0, 9):
        pyplot.subplot(330 + 1 + i)
        pyplot.imshow(x_batch[i].reshape(28, 28), cmap=pyplot.get_cmap('gray'))# show the plot
    
    
    plt.savefig("shiftRandom.png")

    pyplot.show()
    break
  
#TODOS juntos
# define data preparation
train_datagen = ImageDataGenerator(
        rotation_range=45,
        width_shift_range=0.2,
        height_shift_range=0.2,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True,
        fill_mode='nearest')

# fit parameters from data
train_datagen.fit(x_train)

# configure batch size and retrieve one batch of images
for x_batch, y_batch in train_datagen.flow(x_train, y_train, batch_size=9):
    # create a grid of 3x3 images
    for i in range(0, 9):
        pyplot.subplot(330 + 1 + i)
        pyplot.imshow(x_batch[i].reshape(28, 28), cmap=pyplot.get_cmap('gray'))# show the plot
    
    plt.savefig("TodasAsModif.png")

    pyplot.show()
    break